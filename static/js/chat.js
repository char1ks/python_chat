// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
let socket;
let currentUser = null;
let isTyping = false;
let typingTimeout;
let isDarkTheme = true;
let typingUsers = new Set(); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—á–∞—Ç–∞—é—Ç
let longPressTimer = null;
let isLongPressing = false;
let effectsPanelVisible = false;

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', function() {
    initializeChat();
    createParticles();
    setInterval(createParticles, 10000); // –°–æ–∑–¥–∞—ë–º —á–∞—Å—Ç–∏—Ü—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
});

function initializeChat() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
    socket = io();
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO —Å–æ–±—ã—Ç–∏–π
    setupSocketEvents();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
    showLoginModal();
}

// === –°–û–ë–´–¢–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê ===
function bindEvents() {
    const joinBtn = document.getElementById('join-btn');
    const usernameInput = document.getElementById('username-input');
    const messageInput = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-btn');
    const themeToggle = document.getElementById('theme-toggle');
    const effectBtns = document.querySelectorAll('.effect-btn');
    
    // –í—Ö–æ–¥ –≤ —á–∞—Ç
    joinBtn.addEventListener('click', joinChat);
    usernameInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') joinChat();
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–∫–∞–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    sendBtn.addEventListener('mousedown', handleSendButtonDown);
    sendBtn.addEventListener('mouseup', handleSendButtonUp);
    sendBtn.addEventListener('mouseleave', handleSendButtonUp);
    sendBtn.addEventListener('touchstart', handleSendButtonDown);
    sendBtn.addEventListener('touchend', handleSendButtonUp);
    
    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    messageInput.addEventListener('input', handleTyping);
    
    // –°–º–µ–Ω–∞ —Ç–µ–º—ã
    themeToggle.addEventListener('click', toggleTheme);
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã
    effectBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–∂–∞—Ç–∏—è
            btn.classList.add('effect-pulse');
            setTimeout(() => btn.classList.remove('effect-pulse'), 300);
            
            if (btn.classList.contains('emoji-btn')) {
                const emoji = btn.dataset.emoji;
                createEmojiAnimation(emoji);
                socket.emit('send_emoji_animation', { emoji });
            } else if (btn.classList.contains('special-effect')) {
                const effect = btn.dataset.effect;
                createSpecialEffect(effect);
                socket.emit('send_special_effect', { effect_type: effect });
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            hideEffectsPanel();
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
    messageInput.addEventListener('focus', () => {
        messageInput.classList.add('typing-animation');
    });
    
    messageInput.addEventListener('blur', () => {
        messageInput.classList.remove('typing-animation');
    });
}

// === –í–•–û–î –í –ß–ê–¢ ===
function joinChat() {
    const usernameInput = document.getElementById('username-input');
    const username = usernameInput.value.trim();
    
    if (!username) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!', 'warning');
        return;
    }
    
    if (username.length > 20) {
        showNotification('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤!', 'warning');
        return;
    }
    
    currentUser = username;
    socket.emit('join_chat', { username });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
    document.getElementById('login-modal').style.display = 'none';
    document.getElementById('chat-container').style.display = 'grid';
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.getElementById('message-input').focus();
    
    showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}! üéâ`, 'success');
}

// === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –û–¢–ü–†–ê–í–ö–ò ===
function handleSendButtonDown(e) {
    e.preventDefault();
    
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    if (message) {
        isLongPressing = true;
        const sendBtn = document.getElementById('send-btn');
        sendBtn.classList.add('long-press');
        
        longPressTimer = setTimeout(() => {
            if (isLongPressing) {
                showEffectsPanel();
                showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏! üé®', 'info');
            }
        }, 500); // 0.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    }
}

function handleSendButtonUp(e) {
    e.preventDefault();
    
    const sendBtn = document.getElementById('send-btn');
    sendBtn.classList.remove('long-press');
    
    if (longPressTimer) {
        clearTimeout(longPressTimer);
        longPressTimer = null;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª–∏–∫ –∏ –ø–∞–Ω–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –≤–∏–¥–Ω–∞
    if (isLongPressing && !effectsPanelVisible) {
        sendMessage();
    }
    
    isLongPressing = false;
}

// === –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
function sendMessage() {
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    
    if (!message) return;
    
    if (message.length > 500) {
        showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!', 'warning');
        return;
    }
    
    socket.emit('send_message', { message });
    messageInput.value = '';
    
    // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    createSendEffect();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    clearTypingTimeout();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
    hideEffectsPanel();
}

// === SOCKET.IO –°–û–ë–´–¢–ò–Ø ===
function setupSocketEvents() {
    socket.on('user_joined', (data) => {
        addSystemMessage(`${data.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É! üëã`);
        playNotificationSound();
    });
    
    socket.on('user_left', (data) => {
        addSystemMessage(`${data.username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç üëã`);
    });
    
    socket.on('user_count', (data) => {
        updateUserCount(data.count);
    });
    
    socket.on('new_message', (data) => {
        addMessage(data);
        playNotificationSound();
    });
    
    socket.on('chat_history', (data) => {
        data.messages.forEach(message => addMessage(message, false));
    });
    
    socket.on('emoji_animation', (data) => {
        createEmojiAnimation(data.emoji);
        showNotification(`${data.username} –æ—Ç–ø—Ä–∞–≤–∏–ª ${data.emoji}`, 'info');
    });
    
    socket.on('special_effect', (data) => {
        createSpecialEffect(data.effect_type);
        showNotification(`${data.username} –∑–∞–ø—É—Å—Ç–∏–ª —ç—Ñ—Ñ–µ–∫—Ç!`, 'info');
    });
    
    socket.on('user_typing', (data) => {
        if (data.typing) {
            typingUsers.add(data.username);
        } else {
            typingUsers.delete(data.username);
        }
        updateTypingIndicator();
    });
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò ===
function addMessage(data, animate = true) {
    const messagesContainer = document.getElementById('messages-container');
    const messageElement = createMessageElement(data, animate);
    messagesContainer.appendChild(messageElement);
    scrollToBottom();
}

function createMessageElement(data, animate) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${data.username === currentUser ? 'own' : ''}`;
    
    if (animate) {
        messageDiv.style.animationDelay = '0.1s';
    }
    
    const timestamp = new Date(data.timestamp).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-header">
                <span class="username">${escapeHtml(data.username)}</span>
                <span class="timestamp">${timestamp}</span>
            </div>
            <div class="message-text">${escapeHtml(data.message)}</div>
        </div>
    `;
    
    return messageDiv;
}

function addSystemMessage(text) {
    const messagesContainer = document.getElementById('messages-container');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'system-message user-join-animation';
    messageDiv.textContent = text;
    messagesContainer.appendChild(messageDiv);
    scrollToBottom();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∏—Å–∫–æ—Ä–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    createMagicSparkles(messageDiv);
}

function createMagicSparkles(element) {
    for (let i = 0; i < 5; i++) {
        setTimeout(() => {
            const sparkle = document.createElement('div');
            sparkle.className = 'magic-sparkle';
            sparkle.style.left = Math.random() * element.offsetWidth + 'px';
            sparkle.style.top = Math.random() * element.offsetHeight + 'px';
            
            element.appendChild(sparkle);
            
            setTimeout(() => {
                if (sparkle.parentNode) {
                    sparkle.parentNode.removeChild(sparkle);
                }
            }, 2000);
        }, i * 200);
    }
}

function scrollToBottom() {
    const messagesContainer = document.getElementById('messages-container');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// === –ò–ù–î–ò–ö–ê–¢–û–† –ü–ï–ß–ê–¢–ê–ù–ò–Ø ===
function handleTyping() {
    if (!isTyping) {
        isTyping = true;
        socket.emit('typing_start');
    }
    
    clearTypingTimeout();
    typingTimeout = setTimeout(() => {
        isTyping = false;
        socket.emit('typing_stop');
    }, 1000);
}

function clearTypingTimeout() {
    if (typingTimeout) {
        clearTimeout(typingTimeout);
        typingTimeout = null;
    }
}

function updateTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    const typingText = document.getElementById('typing-text');
    
    if (typingUsers.size === 0) {
        indicator.style.display = 'none';
        return;
    }
    
    let text = '';
    const usersArray = Array.from(typingUsers);
    
    if (usersArray.length === 1) {
        text = `${usersArray[0]} –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...`;
    } else if (usersArray.length === 2) {
        text = `${usersArray[0]} –∏ ${usersArray[1]} –Ω–∞–±–∏—Ä–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...`;
    } else {
        text = `${usersArray[0]} –∏ –µ—â—ë ${usersArray.length - 1} —á–µ–ª–æ–≤–µ–∫ –Ω–∞–±–∏—Ä–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...`;
    }
    
    typingText.textContent = text;
    indicator.style.display = 'flex';
    indicator.style.animation = 'slideInMessage 0.3s ease-out';
}

// === –ê–ù–ò–ú–ê–¶–ò–ò –°–ú–ê–ô–õ–ò–ö–û–í ===
function createEmojiAnimation(emoji) {
    const overlay = document.getElementById('animations-overlay');
    const emojiElement = document.createElement('div');
    emojiElement.className = 'flying-emoji';
    emojiElement.textContent = emoji;
    
    // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ —Å–ø—Ä–∞–≤–∞
    const startX = window.innerWidth + 50;
    const startY = Math.random() * (window.innerHeight - 200) + 100;
    const endX = window.innerWidth / 2;
    const endY = window.innerHeight / 2;
    
    emojiElement.style.left = startX + 'px';
    emojiElement.style.top = startY + 'px';
    
    overlay.appendChild(emojiElement);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—ë—Ç–∞ –∫ —Ü–µ–Ω—Ç—Ä—É
    setTimeout(() => {
        emojiElement.style.left = endX + 'px';
        emojiElement.style.top = endY + 'px';
    }, 100);
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (emojiElement.parentNode) {
            emojiElement.parentNode.removeChild(emojiElement);
        }
    }, 3000);
}

// === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ ===
function createSpecialEffect(type) {
    switch (type) {
        case 'confetti':
            createConfetti();
            break;
        case 'fireworks':
            createFireworks();
            break;
        case 'rain':
            createRain();
            break;
        case 'snow':
            createSnow();
            break;
    }
}

function createConfetti() {
    const overlay = document.getElementById('animations-overlay');
    const colors = ['#667eea', '#764ba2', '#f093fb', '#4CAF50', '#ff9800'];
    
    for (let i = 0; i < 50; i++) {
        setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.className = 'confetti-piece';
            confetti.style.left = Math.random() * window.innerWidth + 'px';
            confetti.style.top = '-10px';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
            
            overlay.appendChild(confetti);
            
            setTimeout(() => {
                if (confetti.parentNode) {
                    confetti.parentNode.removeChild(confetti);
                }
            }, 3000);
        }, i * 50);
    }
}

function createFireworks() {
    const overlay = document.getElementById('animations-overlay');
    const colors = ['#667eea', '#764ba2', '#f093fb', '#ff9800', '#4CAF50'];
    
    for (let i = 0; i < 5; i++) {
        setTimeout(() => {
            const centerX = Math.random() * window.innerWidth;
            const centerY = Math.random() * (window.innerHeight / 2) + 100;
            
            for (let j = 0; j < 20; j++) {
                const firework = document.createElement('div');
                firework.className = 'firework';
                firework.style.left = centerX + 'px';
                firework.style.top = centerY + 'px';
                firework.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                
                const angle = (j * 18) * Math.PI / 180;
                const distance = 100 + Math.random() * 100;
                const endX = centerX + Math.cos(angle) * distance;
                const endY = centerY + Math.sin(angle) * distance;
                
                overlay.appendChild(firework);
                
                setTimeout(() => {
                    firework.style.left = endX + 'px';
                    firework.style.top = endY + 'px';
                }, 50);
                
                setTimeout(() => {
                    if (firework.parentNode) {
                        firework.parentNode.removeChild(firework);
                    }
                }, 2000);
            }
        }, i * 300);
    }
}

function createRain() {
    const overlay = document.getElementById('animations-overlay');
    
    for (let i = 0; i < 100; i++) {
        setTimeout(() => {
            const drop = document.createElement('div');
            drop.className = 'rain-drop';
            drop.style.left = Math.random() * window.innerWidth + 'px';
            drop.style.top = '-20px';
            drop.style.animationDelay = Math.random() * 2 + 's';
            
            overlay.appendChild(drop);
            
            setTimeout(() => {
                if (drop.parentNode) {
                    drop.parentNode.removeChild(drop);
                }
            }, 2000);
        }, i * 20);
    }
}

function createSnow() {
    const overlay = document.getElementById('animations-overlay');
    const snowflakes = ['‚ùÑ', '‚ùÖ', '‚ùÜ'];
    
    for (let i = 0; i < 50; i++) {
        setTimeout(() => {
            const flake = document.createElement('div');
            flake.className = 'snow-flake';
            flake.textContent = snowflakes[Math.floor(Math.random() * snowflakes.length)];
            flake.style.left = Math.random() * window.innerWidth + 'px';
            flake.style.top = '-30px';
            flake.style.fontSize = (Math.random() * 1 + 0.5) + 'rem';
            flake.style.animationDuration = (Math.random() * 2 + 3) + 's';
            
            overlay.appendChild(flake);
            
            setTimeout(() => {
                if (flake.parentNode) {
                    flake.parentNode.removeChild(flake);
                }
            }, 4000);
        }, i * 100);
    }
}

// === –≠–§–§–ï–ö–¢ –û–¢–ü–†–ê–í–ö–ò ===
function createSendEffect() {
    const sendBtn = document.getElementById('send-btn');
    sendBtn.style.transform = 'scale(0.9)';
    setTimeout(() => {
        sendBtn.style.transform = '';
    }, 150);
}

// === –§–û–ù–û–í–´–ï –ß–ê–°–¢–ò–¶–´ ===
function createParticles() {
    const container = document.getElementById('particles-container');
    
    for (let i = 0; i < 5; i++) {
        setTimeout(() => {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * window.innerWidth + 'px';
            particle.style.animationDuration = (Math.random() * 3 + 5) + 's';
            
            container.appendChild(particle);
            
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 8000);
        }, i * 200);
    }
}

// === –°–ú–ï–ù–ê –¢–ï–ú–´ ===
function toggleTheme() {
    // –ü–æ–∫–∞ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    showNotification('–°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ç–µ–º—ã! üé®', 'info');
}

// === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type} notification-bounce`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        background: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        color: var(--text-primary);
        backdrop-filter: blur(20px);
        box-shadow: var(--shadow-medium);
        z-index: 10000;
        max-width: 300px;
        word-wrap: break-word;
    `;
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–æ—Ä–∫–∏ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
    createMagicSparkles(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease-out forwards';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// === –ó–í–£–ö–ò ===
function playNotificationSound() {
    const audio = document.getElementById('message-sound');
    if (audio) {
        audio.currentTime = 0;
        audio.play().catch(() => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        });
    }
}

// === –£–¢–ò–õ–ò–¢–´ ===
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function updateUserCount(count) {
    const userCountElement = document.getElementById('user-count');
    const word = count === 1 ? '—á–µ–ª–æ–≤–µ–∫' : count < 5 ? '—á–µ–ª–æ–≤–µ–∫–∞' : '—á–µ–ª–æ–≤–µ–∫';
    userCountElement.textContent = `${count} ${word} –æ–Ω–ª–∞–π–Ω`;
}

function showLoginModal() {
    const modal = document.getElementById('login-modal');
    modal.style.display = 'flex';
    document.getElementById('username-input').focus();
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ù–ï–õ–¨–Æ –≠–§–§–ï–ö–¢–û–í ===
function showEffectsPanel() {
    const panel = document.getElementById('effects-panel');
    panel.style.display = 'block';
    panel.style.animation = 'slideInFromRight 0.3s ease-out';
    effectsPanelVisible = true;
    
    // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
    createMagicSparkles(panel);
}

function hideEffectsPanel() {
    const panel = document.getElementById('effects-panel');
    if (effectsPanelVisible) {
        panel.style.animation = 'slideOutToRight 0.3s ease-out';
        setTimeout(() => {
            panel.style.display = 'none';
            effectsPanelVisible = false;
        }, 300);
    }
}

// –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
document.addEventListener('click', (e) => {
    const panel = document.getElementById('effects-panel');
    const sendBtn = document.getElementById('send-btn');
    
    if (effectsPanelVisible && 
        !panel.contains(e.target) && 
        !sendBtn.contains(e.target)) {
        hideEffectsPanel();
    }
});

// === CSS –ê–ù–ò–ú–ê–¶–ò–ò –ß–ï–†–ï–ó JS ===
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideOutRight {
        from {
            opacity: 1;
            transform: translateX(0);
        }
        to {
            opacity: 0;
            transform: translateX(100%);
        }
    }
    
    .notification-success {
        border-left: 4px solid var(--success-color);
    }
    
    .notification-warning {
        border-left: 4px solid var(--warning-color);
    }
    
    .notification-info {
        border-left: 4px solid var(--info-color);
    }
    
    .notification-danger {
        border-left: 4px solid var(--danger-color);
    }
`;
document.head.appendChild(style);

